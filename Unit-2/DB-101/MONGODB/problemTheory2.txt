Give short and concise answer for all the bellow listed questions :
1.What is a NoSQL Database, and explain the types of NoSQL database?
Defination :
NoSQL databases (aka "not only SQL") are non-tabular databases and store data differently than relational tables.
NoSQL databases come in a variety of types based on their data model.
Types
Key-value pair - simpler type of database where each item contains keys and values.
Document-oriented - store data in documents similar to JSON (JavaScript Object Notation) objects.
Column-oriented - store data in tables, rows, and dynamic columns.
Graph-based - store data in nodes and edges.
Example:
MongoDB : A document-oriented database, is a popular NoSQL database that stores data in JSON-like documents with dynamic schemas.
Cassandra : Optimized for handling large amounts of data across many commodity servers, providing high availability with no single point of failure.
Redis : An in-memory key-value store known for its speed and often used as a caching layer.

2.What is the difference between SQL and NoSQL databases?
Difference in Data Modeling :
One of the key differences is the way the data is modeled in the database.
Data Structure:
MySQL: Relational database (RDBMS). Stores data in fixed tables with rows and columns. Enforces relationships between tables using foreign keys.
MongoDB: NoSQL document-oriented database. Stores data in flexible JSON-like documents with various fields. Schema is less rigid and can evolve over time.
Schema:
MySQL: Fixed schema needs to be defined upfront. Changes to the schema can be complex and require downtime.
MongoDB: Schema-less. Documents can have different structures within a collection. Easier to adapt to changing data models.
Transactions:
MySQL: ACID compliant (Atomicity, Consistency, Isolation, Durability). Ensures data integrity in complex operations.
MongoDB: Eventually consistent. Prioritizes performance and scalability over strict ACID guarantees.
Scalability:
MySQL: Vertical scaling (adding more resources to a single server). Can become complex and expensive for very large datasets.
MongoDB: Horizontal scaling (adding more servers to distribute data). Easier to scale for high volume and high-performance applications.

3.How to choose between MongoDB and MySQL based on your requirements?
Choosing between MongoDB and MySQL depends on your project needs:

Data Structure: MongoDB is ideal for unstructured or semi-structured data, offering schema flexibility, while MySQL is suited for structured data with a predefined schema.
Scalability: MongoDB excels in horizontal scaling for large-scale applications, whereas MySQL typically scales vertically.
Transactions: MySQL is robust for complex transactions with strong ACID compliance; MongoDB handles large volumes of simple transactions well.
Use Case: MongoDB fits real-time analytics, CMS, and IoT applications. MySQL is best for e-commerce, banking, and applications needing complex queries and high data consistency.


4.What are collections and documents in a MongoDB database?
In MongoDB, a collection is a group of documents, similar to a table in a relational database. Collections do not enforce a schema, allowing documents within them to have different fields and structures.
A document is a record in a MongoDB collection, analogous to a row in a table. Documents are stored in BSON (Binary JSON) format and consist of field-value pairs. Each document has a unique identifier called _id. Documents in the same collection can have varying fields, providing flexibility in data modeling.
This schema-less design makes MongoDB suitable for applications with evolving data structures.

5.What is BSON? What is the difference between BSON and JSON?
BSON stands for “Binary JSON,” and that’s exactly what it was invented to be.
BSON’s binary structure encodes type and length information
Which allows it to be traversed much more quickly compared to JSON.
BSON (Binary JSON) and JSON (JavaScript Object Notation) are both formats for data interchange, but they have key differences:
Format:
JSON: Text-based, human-readable format used primarily for data exchange in web applications.
BSON: Binary-encoded format designed to be efficient in storage and traversal.
Data Types:
JSON: Supports basic data types like strings, numbers, arrays, and objects.
BSON: Extends JSON by adding more data types, such as dates, raw binary data, and embedded documents, enhancing efficiency.
Performance:
BSON: Optimized for speed and space, making it ideal for database storage and retrieval.
JSON: Easier to read and debug, suitable for data interchange between clients and servers.
These differences make BSON more suitable for internal database use, like in MongoDB, and JSON more suitable for data exchange over web protocols.

6.What are MongoDB Compass and MongoDB Shell used for?
Mongo Compass :
Mongo Compass is the GUI for Mongodb database.
Compass is a free interactive tool for querying, optimizing, and analyzing your MongoDB data.
Mongo Shell (mongosh) :
The MongoDB Shell, mongosh, is a JavaScript and Node.js REPL environment for interacting with MongoDB.

7.How to create collections in MongoDB?
n MongoDB, collections are created implicitly when you insert a document into a non-existent collection. However, you can also explicitly create a collection using the createCollection method. 
db.createCollection("emp");

8.What is the difference between insertMany and insertOne?
In MongoDB, insertOne and insertMany are methods to insert documents into a collection.
db.collection.insertOne({ name: "John Doe", age: 21 });
db.collection.insertMany([
  { name: "John Doe", age: 21 },
  { name: "Jane Doe", age: 25 }
]);

9.What is the difference between deleteOne and deleteMany?
In MongoDB, deleteOne and deleteMany are methods used to remove documents from a collection, differing in scope and usage.
db.collection.deleteOne({ age: { $gte: 18 } });
db.collection.deleteMany({ age: { $gte: 18 } });

10.How to read data in MongoDB? What is the difference between find and findOne?
In MongoDB, data is read using the find and findOne methods.
Purpose: Retrieves multiple documents that match the query criteria.
db.collection.find({ age: { $gte: 18 } });
Purpose: Retrieves a single document that matches the query criteria.
db.collection.findOne({ age: { $gte: 18 } });

11.What is $set in MongoDB?
In MongoDB, the $set operator is used to update the value of a field in a document. 
It allows you to specify one or more fields along with their new values in an update operation. Here's an example:
db.collection.updateOne(
   { _id: 1 },
   { $set: { status: "active", age: 25 } }
)


12.How to filter data using MongoDB?
n MongoDB, you can filter data using the find method along with query operators. Here's a basic example:
db.collection.find({ age: { $gt: 18 } });
This query retrieves all documents from the collection where the age field is greater than 18. Here are some commonly used query operators for filtering data:
$eq: Matches values that are equal to a specified value.
$gt: Matches values that are greater than a specified value.
$lt: Matches values that are less than a specified value.
$gte: Matches values that are greater than or equal to a specified value.
$lte: Matches values that are less than or equal to a specified value.
$ne: Matches all values that are not equal to a specified value.
$in: Matches any of the values specified in an array.
$nin: Matches none of the values specified in an array.
