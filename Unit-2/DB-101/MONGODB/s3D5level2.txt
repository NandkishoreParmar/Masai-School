Problem Statement
1.Most Popular Project: Formulate a query to find the project with the highest budget by joining the Projects 
collection with the Departments collection, summarizing the total number of projects per department, and limiting 
the result to the department with the highest budget project.
db.projects.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department",
      foreignField: "_id",
      as: "department"
    }
  },
  { $unwind: "$department" },
  {
    $group: {
      _id: "$department.name",
      total: { $sum: 1 },
      maxBudget: { $max: "$budget" }
    }
  }
])

2.Employees in Engineering Department: Write a MongoDB query to list all employees working in the 'Engineering' 
department, sorted by their hire date in ascending order.

db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  { $unwind: "$department" },
  { $match: { "department.name": "Engineering" } },
  { $sort: { hire_date: 1 } }
])

3.Finance Department Projects: Create a query to list all projects in the 'Finance' department, sorted by budget 
in descending order.

db.projects.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "department",
      foreignField: "_id",
      as: "department"
    }
  },
  { $unwind: "$department" },
  { $match: { "department.name": "Finance" } },
  { $sort: { budget: 1 } }
])

4.Recent Sales by Finance Employees: Formulate a query to list all sales made by employees in the 'Finance' 
department since "2023-09-15", sorted by sale date in ascending order.

db.sales.aggregate([
  {
    $lookup: {
      from: "employees",
      localField: "employee_id",
      foreignField: "_id",
      as: "employee"
    }
  },
  { $unwind: "$employee" },
  {
    $lookup: {
      from: "departments",
      localField: "employee.department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  { $unwind: "$department" },
  {
    $match: {
      sale_date: { $gt: "2023-09-15" }
    }
  },
  {
    $project: {
      sale_id: "$_id",
      employeeName: "$employee.name",
      department: "$department.name",
      amount: 1,
      _id: 0
    }
  }
])
5.Project Details for Employee 'John Doe': Write a query to find all projects associated with 'John Doe', 
including project name, budget, and department name.

db.employees.aggregate([
  {
    $match: { name: "John Doe" }
  },
  {
    $lookup: {
      from: "projects",
      localField: "projects",
      foreignField: "_id",
      as: "projects"
    }
  },
  { $unwind: "$projects" },
  {
    $lookup: {
      from: "departments",
      localField: "projects.department",
      foreignField: "_id",
      as: "department"
    }
  },
  { $unwind: "$department" },
  {
    $project: {
      project_name: "$projects.name",
      budget: "$projects.budget",
      department_name: "$department.name",
      _id: 0
    }
  }
])
6.Employees and Their Office Address for 'Payroll Software' Project: Create a query to list all employees 
working on the 'Payroll Software' project with their office addresses.

db.projects.aggregate([
  {
    $match: { name: "Payroll Software" }
  },
  {
    $lookup: {
      from: "departments",
      localField: "department",
      foreignField: "_id",
      as: "department"
    }
  },
  { $unwind: "$department" },
  {
    $lookup: {
      from: "employees",
      localField: "department._id",
      foreignField: "department_id",
      as: "employee"
    }
  },
  { $unwind: "$employee" },
  {
    $lookup: {
      from: "offices",
      localField: "employee.office_id",
      foreignField: "_id",
      as: "office"
    }
  },
  { $unwind: "$office" },
  {
    $project: {
      _id: 0,
      name: "$employee.name",
      address: "$office.address"
    }
  }
])

7.Detailed Sales Report for 'Engineering' Employees: Formulate a query to generate a detailed sales report for each
 sale made by employees in the 'Engineering' department, including employee name, sale amount, and office address.
db.sales.aggregate([
  // Join with Employees collection to get employee details
  {
    $lookup: {
      from: "Employee",
      localField: "employee_id",
      foreignField: "_id",
      as: "employee"
    }
  },
  // Unwind the employee array
  {
    $unwind: "$employee"
  },
  // Join with Departments collection to filter Engineering employees
  {
    $lookup: {
      from: "Departments",
      localField: "employee.department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  // Unwind the department array
  {
    $unwind: "$department"
  },
  // Match only employees in the 'Engineering' department
  {
    $match: {
      "department.name": "Engineering"
    }
  },
  // Join with Offices collection to get office address
  {
    $lookup: {
      from: "offices",
      localField: "employee.office_id",
      foreignField: "_id",
      as: "office"
    }
  },
  // Unwind the office array
  {
    $unwind: "$office"
  },
  // Project the required fields
  {
    $project: {
      _id: 0,
      employee_name: "$employee.name",
      sale_amount: "$amount",
      office_address: "$office.address"
    }
  }
])

8.Top Selling Employees in Each Department: Write a query to identify the top-selling employee in each department 
based on total sales amount, sorting the results by department name.
db.sales.aggregate([
  // Join with Employees collection to get employee details
  {
    $lookup: {
      from: "Employee",
      localField: "employee_id",
      foreignField: "_id",
      as: "employee"
    }
  },
  // Unwind the employee array
  {
    $unwind: "$employee"
  },
  // Group by employee and sum the sales amount
  {
    $group: {
      _id: "$employee_id",
      total_sales: { $sum: "$amount" },
      employee: { $first: "$employee" }
    }
  },
  // Join with Departments collection to get department details
  {
    $lookup: {
      from: "Departments",
      localField: "employee.department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  // Unwind the department array
  {
    $unwind: "$department"
  },
  // Group by department to find the top-selling employee in each department
  {
    $group: {
      _id: "$department._id",
      department_name: { $first: "$department.name" },
      top_employee: { 
        $first: {
          employee_id: "$_id",
          name: "$employee.name",
          total_sales: "$total_sales"
        }
      }
    }
  },
  // Sort by department name
  {
    $sort: { department_name: 1 }
  },
  // Project the required fields
  {
    $project: {
      _id: 0,
      department_name: 1,
      top_employee: 1
    }
  }
])


9.Average Salary by Department: Create a query to calculate the average salary of employees in each department, 
sorting the results by average salary in descending order.
db.Employee.aggregate([
  // Join with Departments collection to get department details
  {
    $lookup: {
      from: "Departments",
      localField: "department_id",
      foreignField: "_id",
      as: "department"
    }
  },
  // Unwind the department array
  {
    $unwind: "$department"
  },
  // Group by department and calculate average salary
  {
    $group: {
      _id: "$department._id",
      department_name: { $first: "$department.name" },
      average_salary: { $avg: "$salary" }
    }
  },
  // Sort by average salary in descending order
  {
    $sort: { average_salary: -1 }
  },
  // Project the required fields
  {
    $project: {
      _id: 0,
      department_name: 1,
      average_salary: 1
    }
  }
])
 

10.Most Involved Employees in Projects by Department: Formulate a query to find the employee with the highest
 number of projects in each department, including the employee's name, number of projects, and department name,
  sorted by the number of projects in descending order.
db.Employee.aggregate([
  // Project the number of projects for each employee
  {
    $project: {
      name: 1,
      department_id: 1,
      num_projects: { $size: "$projects" }
    }
  },
  // Group by department and collect employees with their project counts
  {
    $group: {
      _id: "$department_id",
      Employee: { 
        $push: { 
          name: "$name", 
          num_projects: "$num_projects" 
        }
      }
    }
  },
  // Join with Departments collection to get department details
  {
    $lookup: {
      from: "Departments",
      localField: "_id",
      foreignField: "_id",
      as: "department"
    }
  },
  // Unwind the department array
  {
    $unwind: "$department"
  },
  // Find the employee with the highest number of projects in each department
  {
    $project: {
      department_name: "$department.name",
      top_employee: { 
        $arrayElemAt: [
          { $filter: {
            input: "$Employee",
            as: "employee",
            cond: { $eq: [ "$employee.num_projects", { $max: "$employees.num_projects" } ] }
          } }, 0
        ]
      }
    }
  },
  // Unwind the top_employee array to separate fields
  {
    $replaceRoot: { 
      newRoot: { 
        department_name: "$department_name",
        name: "$top_employee.name",
        num_projects: "$top_employee.num_projects"
      }
    }
  },
  // Sort by number of projects in descending order
  {
    $sort: { num_projects: -1 }
  }
])

