# assume collection name "books"

1.Analyze the tag distribution across the entire inventory . provide the tag 
names and the number of books associated with each tag, sorted in descending order of book count

db.books.aggregate([
    {$unwind: "$tags"},
    {$group : {_id:"$tags",count:{$sum:1}}},
    {$sort: {count:-1}}
])

2. Evaluate the presence of each author in the inventory by their published tags. List the authors along with the count of distinct 
tags they have, sorted by the count in descending order.
db.books.aggregate([
  { $unwind: "$tags" },
  { $group: { _id: "$author", distinctTags: { $addToSet: "$tags" } } },
  { $project: { author: "$_id", tagCount: { $size: "$distinctTags" }, _id: 0 } },
  { $sort: { tagCount: -1 } }
])


3. Identify the most popular tags among books published after 2010. Provide the tag names and the 
number of books for each, limited to the top 5 results.
db.books.aggregate([
  { $match: { publication_year: { $gt: 2010 } } },
  { $unwind: "$tags" },
  { $group: { _id: "$tags", count: { $sum: 1 } } },
  { $sort: { count: -1 } },
  { $limit: 5 }
])


4. Investigate the most frequent tags used by authors with more than one book in the Inventory
. List the top 5 tags along with their respective book counts.
db.books.aggregate([
  { $group: { _id: "$author", tags: { $addToSet: "$tags" } } },
  { $match: { $expr: { $gt: [{ $size: "$tags" }, 1] } } },
  { $unwind: "$tags" },
  { $unwind: "$tags" },
  { $group: { _id: "$tags", count: { $sum: 1 } } },
  { $sort: { count: -1 } },
  { $limit: 5 }
])

5. Determine the most recent books in the inventory. Provide their titles,
 publication years, and add a new field indicating if they were published in the last five years.
 db.books.aggregate([
  { $sort: { publication_year: -1 } },
  { $limit: 5 },
  { $project: { title: 1, publication_year: 1, published_last_five_years: { $cond: { if: { $gte: ["$publication_year", 2017] }, then: true, else: false } } } }
])


6. Perform a comprehensive analysis of books published in the last decade
. Provide the title, author, price, and add a field calculating a 10% discount on the price. Limit the 
results to 10 books
db.books.aggregate([
  { $match: { publication_year: { $gte: 2012 } } },
  { $limit: 10 }, 
  { $project: { title: 1, author: 1, price: 1, discounted_price: { $subtract: ["$price", { $multiply: ["$price", 0.1] }] } } }
])
